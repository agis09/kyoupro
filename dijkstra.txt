struct edge { int to, cost; };
typedef pair<int, int>P;
int nodeN;
vector<edge>G[MAX_N];
int d[MAX_N];
int pre[MAX_N];
void dijkstra(int s) {
	priority_queue<P, vector<P>, greater<P>>que;
	fill(d, d + N, INF);
	fill(pre, pre + N, -1);
	d[s] = 0;
	que.push(P(0, s));

	while (!que.empty()) {
		P p = que.top();
		que.pop();
		int v = p.second;
		if (d[v] < p.first)continue;
		for (int i = 0; i < G[v].size(); i++) {
			edge e = G[v][i];
			if (d[e.to] > d[v] + e.cost) {
				d[e.to] = d[v] + e.cost;
				que.push(P(d[e.to], e.to));
				pre[e.to] = v;
			}
		}
	}
}
vector<int>get_path(int t) {
	vector<int>path;
	for(; t != -1; t = pre[t])path.push_back(t);
	reverse(path.begin(), path.end());
	return path;
}