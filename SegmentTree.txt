//segtree
const int MAX_N = 1<<17;
int da[MAX_N * 2];
int id = INT_MAX;	//a value make the other const when it merge
int merge(int a, int b) {
	return min(a, b);
}
void update(int p, int val) {
	p += MAX_N;
	da[p] = val;
	while (p /= 2)da[p] = merge(da[p * 2], da[p * 2 + 1]);
}
/*int sub(int l, int r,int node, int lb, int ub) {	//section[lb,ub) da[node] has
	if (ub <= l || r <= lb)return id;	//not overlaped
	if (l <= lb&&ub <= r)return da[node];	//contained full
	int c = (lb + ub) / 2;	//send it to childe and merge when it contain a part of them
	return merge(sub(l, r, node * 2, lb, c), sub(l, r, node * 2 + 1, c, ub));
}
int find(int l, int r) {
	return sub(l, r + 1, 1, 0, MAX_N);
}*/
int find(int l, int r) {
	l += MAX_N, r += MAX_N + 1;
	int res1 = id, res2 = id;
	while (l < r) {
		if (l % 2)res1 = merge(res1, da[l++]);
		if (r % 2)res2 = merge(da[--r],res2);
		l /= 2, r /= 2;
	}
	return merge(res1, res2);
}

